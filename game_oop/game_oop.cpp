#include <iostream>
#include <Windows.h>
#include<vector> //для векторов
#include<string> //для строк
#include <ctime> //для генерации случайного числа
#pragma comment (lib, "Winmm.lib") //для подключения музыкального файла

using namespace std;

class The_game {

private:

   const vector<string>color{ "красный", "черный", "коричневый", "голубой", "зеленый" }; //создание библиотеки слов

   const vector<string>animal{ "собака", "кот", "мышь", "слон", "попугай" };

   const vector<string>transport{ "машина", "автобус", "трамвай", "велосипед", "мопед" };

    string word = ""; //переменная для загаданного слова

    string copy_word = ""; //переменная для копирования слова

    char letters ; //переменная для введеных букв

    string guess_letters = ""; //переменная для угаданных букв

    string next = ""; //строка для формарования ввода

    //size_t - базовый беззнаковый целочисленный тип языка Си / Си++.Является типом результата, возвращаемого оператором sizeof.

    size_t error{ 7 }; //сколько можно допустить ошибок

    size_t lenght_letters{ 0 }; //длинна загаданного слова

public:

    The_game() { //конструктор

        choise_letter();// Выбираем слово; 

        cout << "Слово - ";

        while (error) // Перезапускаем цикл пока у пользователя

            body_game();
    };

    void choise_letter() { //функция выбора и маскировкаа слова

        vector<string>category;

        srand(time(NULL)); //установка новой точки отсчета для рандома

        int number = rand() % 5;

        for (int i = 0; i < category[number].size(); i++) {

            word = category[i];
        }

        lenght_letters = word.length(); //записываем длинну слова в переменную

       // auto i - инициализация переменной i, тип которой определяется из значения присваиваемого выражения.

        for (auto letters : word) {

            guess_letters += '_'; // придаём строке угаданных букв первоначальный вид;

            copy_word += letters;// создаём копию слова 

            copy_word += ' '; //добавление пробелов
        }
    }

    const void print_word() // Метод вывода строки с буквами на экран;
    {
        for (auto letter : guess_letters) {

            cout << letter << ' '; // Печатаем знаки разделяя пробелами; 

            cout << "\n\n";
        }
    }

    void body_game() // Метод тела игры;
    {
        print_word();// Выводим строку на экран;

        cout << "Угадайте " << next << " букву: ";

        //wchar_t - для представления значений расширенных наборов символов, которые соответствуют национальным языкам.

        wchar_t letter;// Переменная для буквы от пользователя;

        wcin >> letter;// Запрашиваем ввод символа;

        letter = towupper(letter);// Преобразуем введённый символ в верхний регистр;

        string::size_type position; // Переменная для индекса буквы в слове;

        position = word.find(letter); // Определяем позицию буквы в слове; 

        if (position == string::npos)// Если буквы в слове нет - 
        {
            
            mistake(letter);//  запускаем обработку этого случая;
        }
        else// Если буква в слове есть;
        {
            PlaySound(TEXT("pobeda.wav"), NULL, SND_FILENAME | SND_ASYNC);

            Sleep(1000000000); //задержка звука

            guess_letters[position] = letter;// Добавляем букву в строку вывода; 

            word[position] = '!';// Заменяем эту буку в загаданном слове на "!";

            letters += letter;// Добавляем букву в строку названных букв;

            --lenght_letters; // Уменьшаем переменную на единицу;

            cout << "\nВерно! - ";

            if (!lenght_letters)// Если слово разгаданно полностью;
            {
                print_word();// Выводим строку на экран;

                cout << "\nПОЗДРАВЛЯЕМ!!! Вы полностью разгадали слово!\n\n";

                error = 0;// Уменьшаем количество возможных ошибок до 0 для выхода из цикла;
            }
            next = " следующую ";
        }

        letters += letter;
    }

    void mistake(wchar_t letter)// Обработке неверного ответа;
    {
        PlaySound(TEXT("Lose.wav"), NULL, SND_FILENAME | SND_ASYNC);

        Sleep(1000000000); //задержка звука

       //Статический член C++ string::npos — это измеримое значение, 
       //эквивалентное наибольшему значению, которое может описать тип size_t.

        if (letter == string::npos)  // Если буква не называлась ранее;
        {
            --error;// Уменьшаем количество возможных ошибок;

            cout << "\nНеверно! Такой буквы нет.\n";

            switch (error) // Формируем вывод в соответствии с  количеством воможных ошибок;
            {

                // Выводим картинку;
            case 0:  cout << "\nВы проиграли.\n\n" << picture[0] << "\nБыло загаданно слово \t" << copy_word << "\n\n";    // Выводим загаданное слово на экран;

                break;

            case 1:  cout << "Вам больше нельзя ошибаться!\n\n" << picture[1];

                break;

            case 2: cout << "Вам больше нельзя ошибаться!\n\n" << picture[2];

                break;

            case 3: cout << "Вам больше нельзя ошибаться!\n\n" << picture[3];

                break;

            case 4: cout << "Вам больше нельзя ошибаться!\n\n" << picture[4];

                break;

            case 5: cout << "Вам больше нельзя ошибаться!\n\n" << picture[5];

                break;

            case 6:  cout << "Вам больше нельзя ошибаться!\n\n" << picture[6];

                break;

            case 7:  cout << "Вам больше нельзя ошибаться!\n\n" << picture[7];

                break;

            default: cout << "Наверно... В следующей жизни... ";

                break;
            }
        }
        else cout << "Вы уже называли эту букву - в неразгаданной части слова её нет. Попытка не засчитана, попробуйте ещё раз.\n";

        cout << "\nСлово - ";
    }

    /*const void sentence()  Метод вывода картинки и сообщения;
    {
       cout << '\n' << picture[error] << '\n';  // Печатаем картинку;

       cout << "Вы можете ещё " << error - 1;// Печатаем сообщение;

       if (error == 2 || error == 7)

           cout << " раз";

       else cout << " раза";

        cout << " неверно назвать букву!\n";
    }*/


    const vector<string> picture {

            {   },

            {
                "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\n"
                    "\t\t\t\t\t $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t $                          $\n"
            },

            {
                "\t\t\t\t\t        $$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t $                          $\n"
            },

            {
                "\t\t\t\t\t        $$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t $                          $\n"
            },

            {
                "\t\t\t\t\t        $$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        O             $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t $                          $\n"
            },

            {
                "\t\t\t\t\t        $$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        O             $\n"
                    "\t\t\t\t\t      /   \\          $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t $                          $\n"
            },

            {
                "\t\t\t\t\t        $$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        O             $\n"
                    "\t\t\t\t\t      / | \\          $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t $                          $\n"
            },

            {
                "\t\t\t\t\t        $$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t        O             $\n"
                    "\t\t\t\t\t      / | \\          $\n"
                    "\t\t\t\t\t        |             $\n"
                    "\t\t\t\t\t       / \\           $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t                      $\n"
                    "\t\t\t\t\t $$$$$$$$$$$$$$$$$$$$$$$$$$$$\n"
                    "\t\t\t\t\t $                          $\n"
            },

    };

};

int main()
{
        setlocale(LC_ALL, "rus");// Подключаем локаль;

        int key = 0; // Ключ для прерывания цикла;

        cout << "*** Добро пожаловать в игру «Виселица»! ***\n\n";

        cout << "Желаете сыграть ( Да-1 / Нет-2 )?\n"; cin >> key;

        int run = clock(); //время начала отсчета игры (от)

        while (key == 1)// Цикл для перезапуска игры;
        {
            cout << "Вам нужно угадать слово, которое загадала программа, буква за буквой.\n"
                "Вы угадываете по одной букве и можете ошибиться только 7 раз.\n\n";

            The_game game;// Создаём объект класса;

            cout << "Желаете сыграть ещё раз ( Да-1 / Нет-2 )?\n";

            cin >> key;// Запрашиваем ввод ключа;

            cout << '\n';
        }
        cout << "До новых встреч!\n\n";

        int end = clock(); //время конца игра (до)

        int time_game= (end - run) / CLOCKS_PER_SEC; /* - функция получает количество пройденных тактов за 1 секунду.
        Таким образом, зная сколько выполняется тактов в секунду, зная время запуска программы можно
        посчитать время работы всей программы или отдельного её фрагмента, что и делает данная функция.*/

        cout << "Время игры составило (сек): " << time_game << endl;

        return 0;
}

